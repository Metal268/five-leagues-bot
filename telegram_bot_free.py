import asyncio
import telegram
import feedparser
import os
import requests
from bs4 import BeautifulSoup
from PIL import Image  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Pillow –∑–∞–º—ñ—Å—Ç—å imghdr

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '7578141836:AAGj_be7DOaq0wT-RL53gVDFEn_ZZMDNCXM')
CHAT_ID = os.getenv('CHAT_ID', '8142520596')
CHANNEL_ID = os.getenv('CHANNEL_ID', '@fiveleagues')

# RSS-—Å—Ç—Ä—ñ—á–∫–∏ –¥–ª—è —Ç–æ–ø-5 –ª—ñ–≥ –Ñ–≤—Ä–æ–ø–∏
RSS_FEEDS = [
    'http://feeds.bbci.co.uk/sport/football/premier-league/rss.xml',
    'https://www.skysports.com/rss/football.xml'
]

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = telegram.Bot(token=TELEGRAM_TOKEN)

# –Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –ø–æ—Ä—Ç—É –¥–ª—è Render
os.environ['PORT'] = '0'

async def fetch_news():
    news = []
    for feed in RSS_FEEDS:
        feed_data = feedparser.parse(feed)
        for entry in feed_data.entries[:1]:
            news.append({
                'title': entry.title,
                'summary': entry.summary,
                'link': entry.link
            })
    return news

def get_image_url(url):
    try:
        response = requests.get(url, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        img = soup.find('img')
        return img['src'] if img and 'src' in img.attrs else None
    except:
        return None

async def get_twitter_comments(keyword):
    comments = [
        "–§–∞–Ω–∞—Ç–∏ –õ—ñ–≤–µ—Ä–ø—É–ª—è –≤ –∑–∞—Ö–≤–∞—Ç—ñ –≤—ñ–¥ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—É! #LFC",
        "–ï–∫—Å–ø–µ—Ä—Ç–∏ –∫–∞–∂—É—Ç—å, —â–æ —Ü–µ —É–≥–æ–¥–∞ —Å—Ç–æ–ª—ñ—Ç—Ç—è. #TransferNews"
    ]
    return comments[0] if comments else "–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ"

async def format_final_post(news_item):
    title = news_item['title']
    summary = news_item['summary'].replace('<p>', '').replace('</p>', '')[:250]
    details = summary.split('.')[0] + '. –ü–µ—Ä–µ–≥–æ–≤–æ—Ä–∏ —Ç—Ä–∏–≤–∞—é—Ç—å...'
    twitter_comment = await get_twitter_comments(title.split()[0])
    stats = """
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø—Ä–∏–∫–ª–∞–¥):
‚ñ™Ô∏è 15 –≥–æ–ª—ñ–≤
‚ñ™Ô∏è 8 –∞—Å–∏—Å—Ç—ñ–≤
‚ñ™Ô∏è –ù–∞–π–±—ñ–ª—å—à–µ —É–¥–∞—Ä—ñ–≤ —É –ª—ñ–∑—ñ
‚ñ™Ô∏è –í–∏—Å–æ–∫–∏–π xG
"""
    comment = f"""
üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä —ñ–∑ —Å–æ—Ü–º–µ—Ä–µ–∂:
¬´{twitter_comment}¬ª
"""
    additional_info = """
üìå –©–æ —â–µ –≤—ñ–¥–æ–º–æ:
‚ñ™Ô∏è –£–≥–æ–¥–∞ –º–æ–∂–µ –∑–∞–∫—Ä–∏—Ç–∏—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º–∏ –¥–Ω—è–º–∏
"""

    return f"""
üî¥ *{title}*

{details}

{stats}
{comment}
{additional_info}

#–ê–ü–õ #–õ–∞–õ—ñ–≥–∞ #–°–µ—Ä—ñ—è–ê #–ë—É–Ω–¥–µ—Å–ª—ñ–≥–∞ #–õ—ñ–≥–∞1
"""

async def send_news_to_user():
    news = await fetch_news()
    for item in news:
        final_post = await format_final_post(item)
        keyboard = [
            [{"text": "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "callback_data": "confirm"},
             {"text": "‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", "callback_data": "decline"},
             {"text": "‚úçÔ∏è –í–∏–ø—Ä–∞–≤–∏—Ç–∏", "callback_data": "edit"}]
        ]
        reply_markup = telegram.InlineKeyboardMarkup(keyboard)
        message = await bot.send_message(chat_id=CHAT_ID, text=final_post, reply_markup=reply_markup, parse_mode='Markdown')
        image_url = get_image_url(item['link'])
        if image_url:
            try:
                await bot.send_photo(chat_id=CHAT_ID, photo=image_url)
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –∑ —Ñ–æ—Ç–æ: {e}")
        offset = 0
        while True:
            updates = await bot.get_updates(offset=offset, timeout=10)
            for update in updates:
                if update.callback_query and update.callback_query.message.message_id == message.message_id:
                    query = update.callback_query
                    await query.answer()
                    if query.data == "confirm":
                        await bot.send_message(chat_id=CHANNEL_ID, text=final_post, parse_mode='Markdown')
                        if image_url:
                            try:
                                await bot.send_photo(chat_id=CHANNEL_ID, photo=image_url)
                            except Exception as e:
                                print(f"–ü–æ–º–∏–ª–∫–∞ –∑ —Ñ–æ—Ç–æ: {e}")
                        await query.edit_message_text("‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ –≤ @fiveleagues!")
                    elif query.data == "decline":
                        await query.edit_message_text("‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
                    elif query.data == "edit":
                        await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.")
                    offset = update.update_id + 1
                    return
            await asyncio.sleep(1)

async def main():
    while True:
        await send_news_to_user()
        await asyncio.sleep(3600)

if __name__ == '__main__':
    asyncio.run(main())
